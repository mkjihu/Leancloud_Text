package com.leancloud_text.SQL;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PASSERS".
*/
public class PassersDao extends AbstractDao<Passers, Long> {

    public static final String TABLENAME = "PASSERS";

    /**
     * Properties of entity Passers.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserObjectId = new Property(1, String.class, "UserObjectId", false, "USER_OBJECT_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property UserImageBy = new Property(3, byte[].class, "UserImageBy", false, "USER_IMAGE_BY");
        public final static Property UserImage = new Property(4, String.class, "UserImage", false, "USER_IMAGE");
        public final static Property Isfollow = new Property(5, Boolean.class, "isfollow", false, "ISFOLLOW");
    }


    public PassersDao(DaoConfig config) {
        super(config);
    }
    
    public PassersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PASSERS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_OBJECT_ID\" TEXT NOT NULL UNIQUE ," + // 1: UserObjectId
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"USER_IMAGE_BY\" BLOB," + // 3: UserImageBy
                "\"USER_IMAGE\" TEXT," + // 4: UserImage
                "\"ISFOLLOW\" INTEGER);"); // 5: isfollow
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PASSERS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Passers entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserObjectId());
        stmt.bindString(3, entity.getName());
 
        byte[] UserImageBy = entity.getUserImageBy();
        if (UserImageBy != null) {
            stmt.bindBlob(4, UserImageBy);
        }
 
        String UserImage = entity.getUserImage();
        if (UserImage != null) {
            stmt.bindString(5, UserImage);
        }
 
        Boolean isfollow = entity.getIsfollow();
        if (isfollow != null) {
            stmt.bindLong(6, isfollow ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Passers entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserObjectId());
        stmt.bindString(3, entity.getName());
 
        byte[] UserImageBy = entity.getUserImageBy();
        if (UserImageBy != null) {
            stmt.bindBlob(4, UserImageBy);
        }
 
        String UserImage = entity.getUserImage();
        if (UserImage != null) {
            stmt.bindString(5, UserImage);
        }
 
        Boolean isfollow = entity.getIsfollow();
        if (isfollow != null) {
            stmt.bindLong(6, isfollow ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Passers readEntity(Cursor cursor, int offset) {
        Passers entity = new Passers( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // UserObjectId
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3), // UserImageBy
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // UserImage
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // isfollow
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Passers entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserObjectId(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setUserImageBy(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
        entity.setUserImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsfollow(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Passers entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Passers entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Passers entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
